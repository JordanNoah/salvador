{"version":3,"file":"main.min.js","sources":["../../src/cases/main.js"],"sourcesContent":["import $ from 'jquery';\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport {\r\n    casesEdit\r\n} from 'local_digitalta/repositories/cases_repository';\r\nimport {\r\n    sectionsUpsert,\r\n    sectionsDelete\r\n} from 'local_digitalta/repositories/sections_repository';\r\nimport setEventListeners from 'local_digitalta/cases/listeners';\r\nimport {\r\n    createTinyMCE,\r\n    getTinyMCEContent,\r\n    removeTinyMCEFromArea\r\n} from 'local_digitalta/tiny/manage';\r\nimport {\r\n    autocompleteTags\r\n} from \"local_digitalta/tags/autocomplete\";\r\nimport {\r\n    autocompleteThemes\r\n} from \"local_digitalta/themes/autocomplete\";\r\nimport SELECTORS from \"local_digitalta/cases/selectors\";\r\n\r\nlet urlView = null;\r\n\r\n/**\r\n * Add a new section to the page\r\n *\r\n * @param {number} caseid The id of the case to add the section to\r\n * @param {string} typename A string representing the type of section to add\r\n */\r\nexport const addSection = (caseid, typename) => {\r\n    const formData = {\r\n        id: null,\r\n        component: 'case',\r\n        componentinstance: caseid,\r\n        groupid: null,\r\n        groupname: 'General',\r\n        sequence: null,\r\n        type: null,\r\n        typename: typename,\r\n        title: null,\r\n        content: null\r\n    };\r\n    sectionsUpsert(formData).then((data) => {\r\n        Templates.render('local_digitalta/cases/manage/manage-section-text-edit', {\r\n            id: data.sectionid,\r\n            title: null,\r\n            content: null\r\n        }).then((html) => {\r\n            $(SELECTORS.SECTIONS.sections).append(html);\r\n            createTinyMCE(`content_${data.sectionid}`);\r\n        }).fail(Notification.exception);\r\n    }).fail(Notification.exception);\r\n};\r\n\r\n/**\r\n * Switches the section to view or edit mode\r\n *\r\n * @param {number} sectionid The id of the section being switched\r\n * @param {boolean} toEdit Whether to change to edit mode or not\r\n * @param {string} title The title of the section to display\r\n * @param {string} content The content of the section to display\r\n */\r\nexport const switchSectionEdition = (sectionid, toEdit = false, title = null, content = null) => {\r\n    return new Promise((resolve, reject) => {\r\n        const template = toEdit\r\n            ? 'local_digitalta/cases/manage/manage-section-text-edit'\r\n            : 'local_digitalta/cases/manage/manage-section-text-view';\r\n        Templates.render(template, {id: sectionid, title: title, content: content})\r\n            .then((html) => {\r\n                if (!toEdit) {\r\n                    removeTinyMCEFromArea(`content_${sectionid}`);\r\n                }\r\n                $(`#section_${sectionid}`).replaceWith(html);\r\n                if (toEdit) {\r\n                    createTinyMCE(`content_${sectionid}`);\r\n                }\r\n                return resolve();\r\n            })\r\n            .fail((error) => {\r\n                reject(error);\r\n                Notification.exception(error);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Save the section data\r\n *\r\n * @param {number} caseid The id to which the section belongs\r\n * @param {number} sectionid The id of the section to save\r\n */\r\nexport const saveSection = (caseid, sectionid) => {\r\n    const formData = {\r\n        id: sectionid,\r\n        component: 'case',\r\n        componentinstance: caseid,\r\n        groupid: null,\r\n        groupname: 'General',\r\n        sequence: null,\r\n        type: null,\r\n        typename: 'text',\r\n        title: $(`#title_${sectionid}`).val(),\r\n        content: getTinyMCEContent(`content_${sectionid}`)\r\n    };\r\n    sectionsUpsert(formData).then((data) => {\r\n        switchSectionEdition(data.sectionid, false, formData.title, formData.content);\r\n    }).fail(Notification.exception);\r\n};\r\n\r\n/**\r\n * Deletes a section\r\n *\r\n * @param {number} sectionid The id of the section to delete.\r\n */\r\nexport const deleteSection = (sectionid) => {\r\n    sectionsDelete({id: sectionid}).then((data) => {\r\n        if (data.result) {\r\n            $(`#section_${sectionid}`).remove();\r\n        }\r\n        return;\r\n    }).fail(Notification.exception);\r\n};\r\n\r\n/**\r\n * Change the status of the case to complete.\r\n */\r\nexport const changeStatusToComplete = async () => {\r\n    const form = document.querySelector('#case-manage-form');\r\n    const formData = {\r\n        id: form.querySelector('input[name=\"case-id\"]').value,\r\n        title: form.querySelector('input[name=\"case-manage-title\"]').value,\r\n        description: getTinyMCEContent('case-manage-description'),\r\n        lang: form.querySelector('select[name=\"case-manage-lang\"]').value,\r\n        status: parseInt(1),\r\n        themes:  Array.from(\r\n            form.querySelectorAll('select[name=\"case-manage-themes\"] option:checked'),\r\n            option => option.value),\r\n        tags: Array.from(\r\n            form.querySelectorAll('select[name=\"case-manage-tags\"] option:checked'),\r\n            option => option.value)\r\n    };\r\n    try {\r\n        const response = await casesEdit(formData);\r\n        Notification.addNotification({\r\n            message: 'Case updated successfully',\r\n            type: 'success'\r\n        });\r\n        location.href = urlView + response.caseid;\r\n    } catch (error) {\r\n        Notification.exception(error);\r\n    }\r\n};\r\n\r\n/**\r\n * Validate the form data.\r\n *\r\n * @return {boolean} True if the form is valid.\r\n */\r\nexport const validateFormData = () => {\r\n    // Declare error as false\r\n    let error = false;\r\n    // Hide all error messages\r\n    $([SELECTORS.SECTIONS.formDataError,\r\n        SELECTORS.SECTIONS.errorMissingRequiredFields,\r\n        SELECTORS.SECTIONS.errorEditingSections\r\n    ].join(', ')).hide();\r\n    // Get the form\r\n    const form = document.getElementById(SELECTORS.SECTIONS.form.replace('#', ''));\r\n    // Validate required fields\r\n    if (!validateManageRequiredFields(form)) {\r\n        $(SELECTORS.SECTIONS.errorMissingRequiredFields).show();\r\n        error = true;\r\n    }\r\n    // Validate editing sections\r\n    if (!validateManageEditingSections()) {\r\n        $(SELECTORS.SECTIONS.errorEditingSections).show();\r\n        error = true;\r\n    }\r\n    // Show the error message if there is an error\r\n    if (error) {\r\n        $(SELECTORS.SECTIONS.formDataError).show();\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * Validate required fields.\r\n *\r\n * @param {HTMLElement} form The form to validate.\r\n * @return {boolean} True if all required fields are filled.\r\n */\r\nconst validateManageRequiredFields = (form) => {\r\n    const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');\r\n    for (const field of requiredFields) {\r\n        if (!field.value) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * Validate editing sections.\r\n *\r\n * @return {boolean} True if there are no editing sections.\r\n */\r\nconst validateManageEditingSections = () => {\r\n    const editingSections = document.querySelectorAll('.case-manage-section-edit');\r\n    if (editingSections.length) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * Initialize the module.\r\n * @param {string} dataUrlView - The url to redirect after save the case.\r\n * @return {void}\r\n */\r\nexport const init = async(dataUrlView) => {\r\n    urlView = dataUrlView;\r\n    setEventListeners();\r\n    autocompleteTags(\"#case-manage-tags\");\r\n    autocompleteThemes(\"#case-manage-themes\");\r\n    createTinyMCE('case-manage-description');\r\n};\r\n"],"names":["urlView","caseid","typename","formData","id","component","componentinstance","groupid","groupname","sequence","type","title","content","then","data","render","sectionid","html","SELECTORS","SECTIONS","sections","append","fail","Notification","exception","switchSectionEdition","toEdit","Promise","resolve","reject","template","replaceWith","error","val","result","remove","async","form","document","querySelector","value","description","lang","status","parseInt","themes","Array","from","querySelectorAll","option","tags","response","addNotification","message","location","href","formDataError","errorMissingRequiredFields","errorEditingSections","join","hide","getElementById","replace","validateManageRequiredFields","show","validateManageEditingSections","requiredFields","field","length","dataUrlView"],"mappings":"qiCAwBIA,QAAU,yBAQY,CAACC,OAAQC,kBACzBC,SAAW,CACbC,GAAI,KACJC,UAAW,OACXC,kBAAmBL,OACnBM,QAAS,KACTC,UAAW,UACXC,SAAU,KACVC,KAAM,KACNR,SAAUA,SACVS,MAAO,KACPC,QAAS,8CAEET,UAAUU,MAAMC,0BACjBC,OAAO,wDAAyD,CACtEX,GAAIU,KAAKE,UACTL,MAAO,KACPC,QAAS,OACVC,MAAMI,2BACHC,mBAAUC,SAASC,UAAUC,OAAOJ,kDACbH,KAAKE,eAC/BM,KAAKC,sBAAaC,cACtBF,KAAKC,sBAAaC,kBAWZC,qBAAuB,SAACT,eAAWU,+DAAgBf,6DAAQ,KAAMC,+DAAU,YAC7E,IAAIe,SAAQ,CAACC,QAASC,gBACnBC,SAAWJ,OACX,wDACA,2EACIX,OAAOe,SAAU,CAAC1B,GAAIY,UAAWL,MAAOA,MAAOC,QAASA,UAC7DC,MAAMI,OACES,4DACgCV,mDAEvBA,YAAae,YAAYd,MACnCS,oDACyBV,YAEtBY,aAEVN,MAAMU,QACHH,OAAOG,6BACMR,UAAUQ,sFAWZ,CAAC/B,OAAQe,mBAC1Bb,SAAW,CACbC,GAAIY,UACJX,UAAW,OACXC,kBAAmBL,OACnBM,QAAS,KACTC,UAAW,UACXC,SAAU,KACVC,KAAM,KACNR,SAAU,OACVS,OAAO,oCAAYK,YAAaiB,MAChCrB,SAAS,+CAA6BI,qDAE3Bb,UAAUU,MAAMC,OAC3BW,qBAAqBX,KAAKE,WAAW,EAAOb,SAASQ,MAAOR,SAASS,YACtEU,KAAKC,sBAAaC,mCAQKR,oDACX,CAACZ,GAAIY,YAAYH,MAAMC,OAC9BA,KAAKoB,+CACSlB,YAAamB,YAGhCb,KAAKC,sBAAaC,4CAMaY,gBAC5BC,KAAOC,SAASC,cAAc,qBAC9BpC,SAAW,CACbC,GAAIiC,KAAKE,cAAc,yBAAyBC,MAChD7B,MAAO0B,KAAKE,cAAc,mCAAmCC,MAC7DC,aAAa,6BAAkB,2BAC/BC,KAAML,KAAKE,cAAc,mCAAmCC,MAC5DG,OAAQC,SAAS,GACjBC,OAASC,MAAMC,KACXV,KAAKW,iBAAiB,qDACtBC,QAAUA,OAAOT,QACrBU,KAAMJ,MAAMC,KACRV,KAAKW,iBAAiB,mDACtBC,QAAUA,OAAOT,mBAGfW,eAAiB,+BAAUhD,gCACpBiD,gBAAgB,CACzBC,QAAS,4BACT3C,KAAM,YAEV4C,SAASC,KAAOvD,QAAUmD,SAASlD,OACrC,MAAO+B,6BACQR,UAAUQ,mCASC,SAExBA,OAAQ,sBAEV,CAACd,mBAAUC,SAASqC,cAClBtC,mBAAUC,SAASsC,2BACnBvC,mBAAUC,SAASuC,sBACrBC,KAAK,OAAOC,aAERvB,KAAOC,SAASuB,eAAe3C,mBAAUC,SAASkB,KAAKyB,QAAQ,IAAK,YAErEC,6BAA6B1B,4BAC5BnB,mBAAUC,SAASsC,4BAA4BO,OACjDhC,OAAQ,GAGPiC,sDACC/C,mBAAUC,SAASuC,sBAAsBM,OAC3ChC,OAAQ,IAGRA,4BACEd,mBAAUC,SAASqC,eAAeQ,QAC7B,UAWTD,6BAAgC1B,aAC5B6B,eAAiB7B,KAAKW,iBAAiB,6DACxC,MAAMmB,SAASD,mBACXC,MAAM3B,aACA,SAGR,GAQLyB,8BAAgC,KACV3B,SAASU,iBAAiB,6BAC9BoB,qBAWJhC,MAAAA,cAChBpC,QAAUqE,wEAEO,2DACE,iDACL"}